#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üßª Script para Popular Bases de Dados - Chatbot PaperCare
Cria dados de exemplo para demonstra√ß√£o do dashboard e funcionalidades
"""

import sqlite3
import json
import random
from datetime import datetime, timedelta
from typing import List, Dict

# Dados de exemplo para popular as bases de dados
NOMES_EXEMPLO = [
    "Jo√£o Silva", "Maria Santos", "Ant√≥nio Costa", "Ana Ferreira", "Carlos Pereira",
    "Sofia Oliveira", "Miguel Rodrigues", "Catarina Alves", "Pedro Gon√ßalves", "In√™s Martins",
    "Ricardo Sousa", "Beatriz Lima", "Tiago Carvalho", "Joana Ribeiro", "Bruno Dias",
    "Marta Fernandes", "Andr√© Lopes", "Teresa Mendes", "Hugo Barbosa", "Cristina Rocha"
]

EMPRESAS_EXEMPLO = [
    "Supermercados Continente", "Pingo Doce", "Lidl Portugal", "Auchan",
    "Hotel Vila Gal√©", "Pestana Hotels", "TAP Air Portugal", "NOS",
    "Vodafone Portugal", "MEO", "Banco Santander", "CGD",
    "Sonae MC", "Jer√≥nimo Martins", "EDP", "Galp Energia",
    "Caf√© Delta", "Compal", "Unicer", "Super Bock Group"
]

DOMINIOS_EMAIL = ["gmail.com", "hotmail.com", "sapo.pt", "outlook.com", "empresa.pt"]

PRODUTOS = ["1 Folha", "2 Folhas", "3 Folhas Premium"]

MERCADOS = ["Retalho", "Hotelaria", "Escrit√≥rios", "Restaura√ß√£o", "Sa√∫de"]

ESPECIALISTAS = [
    "ana.silva@papercare.pt", "joao.costa@papercare.pt", "sofia.santos@papercare.pt",
    "miguel.ferreira@papercare.pt", "carla.oliveira@papercare.pt"
]

CATEGORIAS_RECLAMACAO = ["produto", "atendimento", "entrega", "pre√ßo", "qualidade"]

MENSAGENS_RECLAMACAO = [
    "O produto chegou danificado e quero uma substitui√ß√£o",
    "O papel √© muito fino e rasga facilmente",  
    "A entrega demorou mais do que prometido",
    "O pre√ßo aumentou muito desde o m√™s passado",
    "A qualidade n√£o corresponde ao que foi descrito",
    "N√£o recebi a encomenda no prazo indicado",
    "O papel n√£o √© t√£o absorvente como esperava",
    "Falta de stock constante nos supermercados",
    "Embalagem n√£o √© sustent√°vel como prometido",
    "Atendimento ao cliente pouco profissional"
]

def gerar_telefone() -> str:
    """Gera um n√∫mero de telefone portugu√™s realista"""
    prefixos = ["91", "92", "93", "96"]
    prefixo = random.choice(prefixos)
    numero = ''.join([str(random.randint(0, 9)) for _ in range(7)])
    return f"+351 {prefixo} {numero[:3]} {numero[3:]}"

def gerar_email(nome: str) -> str:
    """Gera email baseado no nome"""
    nome_parts = nome.lower().split()
    if len(nome_parts) >= 2:
        email_user = f"{nome_parts[0]}.{nome_parts[1]}"
    else:
        email_user = nome_parts[0]
    
    # Remover acentos
    replacements = {
        '√£': 'a', '√°': 'a', '√†': 'a', '√¢': 'a',
        '√©': 'e', '√™': 'e', '√®': 'e',
        '√≠': 'i', '√Æ': 'i', '√¨': 'i',
        '√≥': 'o', '√¥': 'o', '√µ': 'o', '√≤': 'o',
        '√∫': 'u', '√ª': 'u', '√π': 'u',
        '√ß': 'c'
    }
    
    for old, new in replacements.items():
        email_user = email_user.replace(old, new)
    
    dominio = random.choice(DOMINIOS_EMAIL)
    return f"{email_user}@{dominio}"

def gerar_timestamp_recente(dias_atras: int = 30) -> str:
    """Gera timestamp recente para simular atividade"""
    agora = datetime.now()
    tempo_aleatorio = agora - timedelta(
        days=random.randint(0, dias_atras),
        hours=random.randint(0, 23),
        minutes=random.randint(0, 59)
    )
    return tempo_aleatorio.isoformat()

def popular_metricas(cursor: sqlite3.Cursor, num_registos: int = 100):
    """Popula tabela de m√©tricas com dados de exemplo"""
    print(f"üìä Criando {num_registos} registos de m√©tricas...")
    
    for i in range(num_registos):
        conversa_id = f"conversa_{i:04d}"
        tempo_resposta = round(random.uniform(0.5, 5.0), 2)  # 0.5 a 5 segundos
        timestamp = gerar_timestamp_recente()
        
        cursor.execute("""
            INSERT INTO metricas (conversa_id, tempo_resposta, timestamp)
            VALUES (?, ?, ?)
        """, (conversa_id, tempo_resposta, timestamp))

def popular_leads(cursor: sqlite3.Cursor, num_registos: int = 50):
    """Popula tabela de leads com dados de exemplo"""
    print(f"üë• Criando {num_registos} registos de leads...")
    
    status_opcoes = ["novo", "contactado", "convertido", "perdido"]
    
    for i in range(num_registos):
        nome = random.choice(NOMES_EXEMPLO)
        email = gerar_email(nome)
        telefone = gerar_telefone()
        empresa = random.choice(EMPRESAS_EXEMPLO)
        produto = random.choice(PRODUTOS)
        mercado = random.choice(MERCADOS)
        especialista = random.choice(ESPECIALISTAS)
        timestamp = gerar_timestamp_recente()
        status = random.choice(status_opcoes)
        
        cursor.execute("""
            INSERT INTO leads (nome, email, telefone, empresa, produto, mercado, especialista, timestamp, status)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (nome, email, telefone, empresa, produto, mercado, especialista, timestamp, status))

def popular_satisfacao(cursor: sqlite3.Cursor, num_registos: int = 80):
    """Popula tabela de satisfa√ß√£o com dados de exemplo"""
    print(f"‚≠ê Criando {num_registos} registos de satisfa√ß√£o...")
    
    for i in range(num_registos):
        conversa_id = f"conversa_{i:04d}"
        # Gerar avalia√ß√µes com tend√™ncia positiva (mais 4-5 estrelas)
        if random.random() < 0.7:  # 70% chance de avalia√ß√£o boa
            avaliacao = round(random.uniform(4.0, 5.0), 1)
        else:
            avaliacao = round(random.uniform(1.0, 4.0), 1)
        
        timestamp = gerar_timestamp_recente()
        
        cursor.execute("""
            INSERT INTO satisfacao (conversa_id, avaliacao, timestamp)
            VALUES (?, ?, ?)
        """, (conversa_id, avaliacao, timestamp))

def popular_reclamacoes(cursor: sqlite3.Cursor, num_registos: int = 25):
    """Popula tabela de reclama√ß√µes com dados de exemplo"""
    print(f"üìù Criando {num_registos} registos de reclama√ß√µes...")
    
    status_opcoes = ["nova", "em_andamento", "resolvida", "fechada"]
    
    for i in range(num_registos):
        conversa_id = f"conversa_{i:04d}"
        mensagem = random.choice(MENSAGENS_RECLAMACAO)
        categoria = random.choice(CATEGORIAS_RECLAMACAO)
        timestamp = gerar_timestamp_recente()
        status = random.choice(status_opcoes)
        
        cursor.execute("""
            INSERT INTO reclamacoes (conversa_id, mensagem, categoria, timestamp, status)
            VALUES (?, ?, ?, ?, ?)
        """, (conversa_id, mensagem, categoria, timestamp, status))

def popular_conversas_rasa(cursor: sqlite3.Cursor, num_conversas: int = 30):
    """Popula tabela do Rasa tracker com conversas de exemplo"""
    print(f"üí¨ Criando {num_conversas} conversas de exemplo no Rasa...")
    
    # Verificar o maior ID existente
    cursor.execute("SELECT MAX(id) FROM events")
    max_id = cursor.fetchone()[0]
    event_id = (max_id + 1) if max_id else 1
    
    print(f"   Come√ßando com event_id: {event_id}")
    
    intents_exemplo = [
        "saudacao", "tipos_papel", "precos", "sustentabilidade", 
        "onde_comprar", "horario_atendimento", "qualidade_papel",
        "empresa_desconto", "reclamacao", "garantia", "info_tecnica"
    ]
    
    actions_exemplo = [
        "utter_saudacao", "utter_tipos_papel", "utter_precos", 
        "utter_sustentabilidade", "utter_onde_comprar", "utter_horario_atendimento"
    ]
    
    for i in range(num_conversas):
        sender_id = f"user_{i:04d}"
        
        # Criar eventos de uma conversa t√≠pica
        num_eventos = random.randint(3, 8)  # 3 a 8 intera√ß√µes por conversa
        
        for j in range(num_eventos):
            timestamp = datetime.now().timestamp() - random.randint(0, 2592000)  # √öltimos 30 dias
            
            if j % 2 == 0:  # Mensagem do usu√°rio
                intent_name = random.choice(intents_exemplo)
                data = json.dumps({
                    "text": f"Mensagem de exemplo {j}",
                    "intent": {"name": intent_name, "confidence": round(random.uniform(0.85, 0.99), 3)},
                    "entities": []
                })
                
                cursor.execute("""
                    INSERT INTO events (id, sender_id, type_name, timestamp, intent_name, data)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (event_id, sender_id, "user", timestamp, intent_name, data))
                
            else:  # Resposta do bot
                action_name = random.choice(actions_exemplo)
                data = json.dumps({
                    "text": f"Resposta autom√°tica do bot",
                    "buttons": []
                })
                
                cursor.execute("""
                    INSERT INTO events (id, sender_id, type_name, timestamp, action_name, data)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (event_id, sender_id, "bot", timestamp, action_name, data))
            
            event_id += 1

def main():
    """Fun√ß√£o principal para popular todas as bases de dados"""
    print("üßª Populando Bases de Dados do Chatbot PaperCare")
    print("=" * 50)
    
    # Conectar √† base de dados de KPIs
    print("\nüìä Conectando √† base de dados de KPIs...")
    conn_kpis = sqlite3.connect('chatbot_kpis.db')
    cursor_kpis = conn_kpis.cursor()
    
    # Popular tabelas de KPIs
    popular_metricas(cursor_kpis, 150)
    popular_leads(cursor_kpis, 75)
    popular_satisfacao(cursor_kpis, 120)
    popular_reclamacoes(cursor_kpis, 35)
    
    conn_kpis.commit()
    conn_kpis.close()
    
    # Conectar √† base de dados do Rasa
    print("\nüí¨ Conectando √† base de dados do Rasa...")
    conn_rasa = sqlite3.connect('rasa_tracker.db')
    cursor_rasa = conn_rasa.cursor()
    
    # Popular conversas do Rasa
    popular_conversas_rasa(cursor_rasa, 50)
    
    conn_rasa.commit()
    conn_rasa.close()
    
    print("\n‚úÖ Bases de dados populadas com sucesso!")
    print("\nüìã Resumo dos dados criados:")
    print("  üìä 150 m√©tricas de tempo de resposta")
    print("  üë• 75 leads de potenciais clientes")
    print("  ‚≠ê 120 avalia√ß√µes de satisfa√ß√£o")
    print("  üìù 35 reclama√ß√µes de exemplo")
    print("  üí¨ 50 conversas com hist√≥rico no Rasa")
    print("\nüéØ Agora pode:")
    print("  1. Executar o dashboard: python kpi_dashboard.py")
    print("  2. Iniciar o chatbot: python app.py")
    print("  3. Ver dados no frontend: http://localhost:5020")

if __name__ == "__main__":
    main()